//
//  HTMDSidebarBorderView.m
//  MissingDrawer

#import "HTMDSidebarBorderView.h"
#import "HTMDResizer.h"
#import "Foundation/NSGeometry.h"

#pragma mark -
#pragma mark Original methods

@implementation HTMDSidebarBorderView
- (id)initWithFrame:(NSRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code here.
    }
    return self;
}

#pragma mark -
#pragma mark Overridden from NSView

//for convenience
- (BOOL)mouseDownCanMoveWindow
{
    return YES;
}

- (void)drawRect:(NSRect)rect
{
    // Drawing code here.
    NSRect fromRect;
    NSImage* image=[HTMDSidebarBorderView sidebarBorderImage];
    fromRect.size=[image size];
    fromRect.origin.x=0;
    fromRect.origin.y=0;

    [image drawInRect:[self frame] fromRect:fromRect operation:NSCompositeSourceOver fraction:1.0];
}

#pragma mark -
#pragma mark Sidebar conversion

int HTMDSidebarBorderViewSortViewX(id viewA, id viewB, void *context)
{
    float v1 = [viewA frame].origin.x;
    float v2 = [viewB frame].origin.x;
    if (v1 < v2)
        return NSOrderedAscending;
    else if (v1 > v2)
        return NSOrderedDescending;
    else
        return NSOrderedSame;
}

- (void)addToSuperview:(NSView*)superview
{
    NSView* outlineView=nil;
    NSRect aRect;
    int i, cnt;
    
    //adjust frame
    NSImage* image=[HTMDSidebarBorderView sidebarBorderImage];
    aRect.origin.x=-1.0;
    aRect.origin.y=0.0;
    aRect.size.height=[image size].height;
    aRect.size.width=[superview frame].size.width+2;
    
    //add resizer image
    NSRect rRect=NSZeroRect;
    NSImage* sidebarResizerImage=[HTMDSidebarBorderView sidebarResizerImage];
    rRect.size = [sidebarResizerImage size];
    rRect.origin.y = 0;
    rRect.origin.x = [self frame].size.width-rRect.size.width;
    NSImageView *imageView = [[HTMDResizer alloc] initWithFrame:rRect];
    [imageView setImage: sidebarResizerImage];
    [imageView setAutoresizingMask:NSViewMinXMargin];
    [self addSubview:imageView];
    [self setNeedsDisplay:YES];
    
    [self setAutoresizingMask:(NSViewWidthSizable+NSViewMaxYMargin)];
    
    //add self to superview
    [superview addSubview:self];
    [self setFrame:aRect];

    //gather buttons
    NSMutableArray* btns=[[NSMutableArray alloc]init];
    NSArray* subviews=[superview subviews];
    cnt=[subviews count];
    for (i=0; i<cnt; i++) {
        id aView=[subviews objectAtIndex:i];
        if([aView isKindOfClass:[NSButton class]] && [aView frame].origin.y<1){
            [btns addObject:aView];
        }else if([aView isKindOfClass:[NSScrollView class]]){
            outlineView=aView;
        }
    }

    [btns sortUsingFunction:HTMDSidebarBorderViewSortViewX context:nil];
    
    //place buttons into sideboardview (self)
    cnt=[btns count];
    float leftLoc=0;
    float rightLoc=[self frame].size.width;
    for (i=0; i<cnt; i++) {
        id aView=[btns objectAtIndex:i];
        aRect=[aView frame];
        aRect.origin.y=-4;
        
        if([aView autoresizingMask]&NSViewMaxXMargin){
            //left side
            aRect.origin.x=leftLoc;
            leftLoc+=(aRect.size.width-1);
        }else{
            //right side
            [aView setAutoresizingMask:NSViewMaxXMargin];
            rightLoc-=aRect.size.width;
            aRect.origin.x=71;
        }
        [aView removeFromSuperview];
        [self addSubview:aView];
        [aView setFrame:aRect];
    }
    
    //adjust outlineView frame
    if(outlineView){
        aRect=[superview frame];
        aRect.origin.x=-1.0;
        aRect.origin.y=[self frame].size.height;
        aRect.size.height=aRect.size.height-aRect.origin.y+1;
        aRect.size.width=aRect.size.width+2;
        [outlineView setFrame:aRect];
        
        NSOutlineView* realOutlineView = [outlineView documentView];
        NSFont *font = [NSFont fontWithName:@"Lucida Grande" size:12];
        [realOutlineView setRowHeight:[font defaultLineHeightForFont]];
        [realOutlineView setIntercellSpacing:NSMakeSize (6.0, 4.0)];
        [realOutlineView reloadData];
    }
    [btns release];
    [imageView release];
}

#pragma mark -
#pragma mark Images

+ (NSImage*)sidebarBorderImage
{
    static NSImage* _sidebarBorderImage=nil;
    if(_sidebarBorderImage==nil){
        UInt8 bytes[]={
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0F,
        0x08, 0x06, 0x00, 0x00, 0x00, 0x25, 0x1F, 0xA5, 0xF9, 0x00, 0x00, 0x01,
        0xC2, 0x69, 0x43, 0x43, 0x50, 0x49, 0x43, 0x43, 0x20, 0x50, 0x72, 0x6F,
        0x66, 0x69, 0x6C, 0x65, 0x00, 0x00, 0x78, 0x9C, 0x8D, 0x91, 0xC1, 0x6A,
        0x13, 0x51, 0x14, 0x86, 0xBF, 0x3B, 0x41, 0x5B, 0x69, 0x09, 0x28, 0x83,
        0x0A, 0x2E, 0x1C, 0x50, 0xB4, 0x42, 0x2A, 0xD3, 0x66, 0x93, 0x8A, 0x8B,
        0xD4, 0x56, 0x8A, 0x90, 0x42, 0x68, 0xA2, 0x26, 0x59, 0x39, 0xBD, 0x33,
        0x4D, 0x0A, 0x99, 0xE9, 0x65, 0xE6, 0xA6, 0x36, 0xE8, 0x22, 0x2B, 0x1F,
        0xC0, 0x85, 0xE0, 0x4E, 0x10, 0xA4, 0x0F, 0x20, 0xAD, 0xBB, 0x66, 0xD9,
        0x8D, 0x0B, 0x15, 0x34, 0xB8, 0xF6, 0x0D, 0x2A, 0xDD, 0x48, 0x19, 0x17,
        0xD7, 0x10, 0x10, 0x83, 0xFD, 0xE1, 0xC0, 0x77, 0x7E, 0x0E, 0x9C, 0x7B,
        0xFF, 0x03, 0x19, 0xD7, 0x53, 0xAA, 0x6D, 0x01, 0x61, 0xA4, 0xE3, 0xB5,
        0x95, 0x7B, 0x4E, 0xAD, 0xDE, 0x70, 0x26, 0x06, 0x58, 0x9C, 0xE5, 0x1C,
        0x57, 0x29, 0x78, 0x32, 0x51, 0x8B, 0xE5, 0x72, 0x89, 0xB1, 0x3A, 0xFE,
        0x8A, 0x00, 0xF8, 0x32, 0xEB, 0x29, 0xD5, 0x1E, 0x3F, 0xF7, 0x4F, 0x65,
        0xE3, 0x5A, 0xBD, 0x01, 0x22, 0x07, 0xD8, 0x4D, 0xC3, 0x45, 0xC0, 0x5E,
        0x37, 0x5C, 0x05, 0xEC, 0xA7, 0x5A, 0x69, 0x10, 0x2D, 0xC0, 0x96, 0x2D,
        0xCF, 0x07, 0xF1, 0x1C, 0xC8, 0xC5, 0xD5, 0xB5, 0x25, 0x10, 0xBB, 0x40,
        0xB6, 0x69, 0xF8, 0x03, 0x90, 0x5D, 0x37, 0x7C, 0x08, 0x64, 0xB7, 0x65,
        0x53, 0x83, 0x18, 0x00, 0x6E, 0xE4, 0x6F, 0x46, 0x60, 0x4D, 0x02, 0x05,
        0x3F, 0x48, 0x24, 0x58, 0x45, 0x20, 0xF0, 0x13, 0x19, 0x82, 0xB5, 0x0B,
        0xDC, 0x0D, 0xC3, 0x2D, 0x1F, 0xAC, 0x1F, 0xC0, 0x8C, 0x54, 0xB1, 0x86,
        0xCC, 0x34, 0x70, 0xBD, 0x56, 0x6F, 0x38, 0xE6, 0xC9, 0xEA, 0x1A, 0x2C,
        0x74, 0x20, 0xF3, 0x66, 0xE4, 0x3D, 0xD9, 0x81, 0xF7, 0x2F, 0xE0, 0xF2,
        0xCB, 0x91, 0x77, 0xE3, 0x0E, 0x5C, 0xB8, 0x02, 0x7B, 0x3F, 0x47, 0xDE,
        0xD1, 0x00, 0x01, 0x88, 0x8B, 0x93, 0xC9, 0x46, 0x7E, 0x1E, 0x00, 0x31,
        0xB5, 0x0F, 0x67, 0x5E, 0xA5, 0xE9, 0xD1, 0x63, 0x98, 0xB8, 0x05, 0x27,
        0xDF, 0xD2, 0xF4, 0xD7, 0x7E, 0x9A, 0x9E, 0xBC, 0x83, 0xCC, 0x77, 0xE8,
        0x1F, 0xCB, 0x4E, 0xBC, 0xFD, 0x27, 0x2F, 0x21, 0x3E, 0xC2, 0xFF, 0x7A,
        0xF3, 0x67, 0xD3, 0xC3, 0x27, 0x3D, 0xA4, 0x71, 0x6C, 0x72, 0x01, 0xC0,
        0x85, 0xB7, 0x7D, 0xA8, 0xF6, 0xA0, 0xD4, 0x87, 0xD7, 0x3D, 0xB8, 0x79,
        0x09, 0xCE, 0x3F, 0x83, 0x72, 0x11, 0xAA, 0x45, 0xAC, 0x7C, 0x7E, 0x58,
        0x26, 0x43, 0x00, 0xA6, 0x2A, 0xDD, 0x48, 0xAE, 0x7A, 0x89, 0x0E, 0xE2,
        0xD3, 0x9E, 0xFE, 0xF4, 0x0A, 0xDB, 0x9D, 0xE1, 0x1E, 0x0B, 0x98, 0x0E,
        0xA2, 0x87, 0x15, 0xC0, 0x06, 0x66, 0xFC, 0x60, 0xF9, 0xFE, 0x90, 0xA9,
        0xD0, 0x25, 0x42, 0xB2, 0x8A, 0x47, 0x82, 0x26, 0x20, 0x36, 0xF7, 0x04,
        0x28, 0xCD, 0x82, 0xD8, 0x7B, 0xB4, 0x3C, 0xB7, 0x70, 0xB0, 0xF2, 0xB9,
        0xF7, 0xF7, 0x0E, 0x1D, 0xEC, 0x68, 0x80, 0xA5, 0x2D, 0xD5, 0x8D, 0x37,
        0x9B, 0x2D, 0xED, 0x2C, 0x2A, 0xD5, 0x0E, 0x72, 0xCE, 0x83, 0x48, 0xDE,
        0xCE, 0x39, 0xF3, 0xAE, 0x5B, 0xE0, 0x37, 0x52, 0xA2, 0x81, 0xB6, 0xDA,
        0xAE, 0x07, 0x0B, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00,
        0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18,
        0x00, 0x00, 0x00, 0x37, 0x49, 0x44, 0x41, 0x54, 0x08, 0x99, 0x2D, 0xC9,
        0x39, 0x0E, 0xC0, 0x40, 0x08, 0x03, 0x40, 0xDB, 0x08, 0xF1, 0xFF, 0xE7,
        0x82, 0x38, 0x52, 0x64, 0xCB, 0xD1, 0xE0, 0xEE, 0x4E, 0x55, 0x05, 0x75,
        0x37, 0xB4, 0xBB, 0x10, 0x49, 0x68, 0x66, 0x1E, 0x33, 0x13, 0x8A, 0x08,
        0xC8, 0xCC, 0xDE, 0xBA, 0xFB, 0x4F, 0xEC, 0xEE, 0x89, 0x24, 0x3E, 0xF4,
        0x6E, 0x1A, 0x07, 0xCA, 0x1B, 0x6B, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 };
        
        NSData* data=[NSData dataWithBytes:bytes length:sizeof(bytes)];
        _sidebarBorderImage=[[NSImage alloc]initWithData:data];
    }
    return _sidebarBorderImage;
}

+ (NSImage*)sidebarResizerImage
{
    static NSImage* _sidebarResizerImage=nil;
    if(_sidebarResizerImage==nil){
        UInt8 bytes[]={
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0F,
        0x08, 0x06, 0x00, 0x00, 0x00, 0xED, 0x73, 0x4F, 0x2F, 0x00, 0x00, 0x01,
        0x82, 0x69, 0x43, 0x43, 0x50, 0x49, 0x43, 0x43, 0x20, 0x50, 0x72, 0x6F,
        0x66, 0x69, 0x6C, 0x65, 0x00, 0x00, 0x78, 0x9C, 0x95, 0x91, 0xCF, 0x2B,
        0x04, 0x61, 0x18, 0xC7, 0x3F, 0xEF, 0x48, 0x4A, 0x6B, 0x2F, 0xC6, 0x8F,
        0x94, 0x9A, 0x83, 0xD8, 0xC3, 0xD2, 0xC6, 0x85, 0x92, 0xB2, 0x7B, 0x40,
        0x1C, 0xD6, 0xA6, 0xEC, 0xEE, 0x6D, 0x76, 0x66, 0xAC, 0xAD, 0x31, 0xFB,
        0x36, 0xF3, 0x5A, 0xFC, 0x01, 0xEE, 0xCA, 0x4D, 0x0E, 0x7E, 0x94, 0x93,
        0xE4, 0x24, 0xC7, 0xFD, 0x03, 0x5C, 0xA4, 0xE4, 0x20, 0xE5, 0x3F, 0x50,
        0xCA, 0x45, 0x1A, 0x87, 0x97, 0xF6, 0x42, 0xF2, 0xAD, 0xA7, 0x3E, 0xCF,
        0xB7, 0xA7, 0x9E, 0x5F, 0x60, 0x34, 0x6D, 0x29, 0x7D, 0x03, 0xD8, 0x08,
        0x54, 0x58, 0x98, 0xCB, 0x5A, 0xC5, 0x52, 0xD9, 0xEA, 0x78, 0xC0, 0x20,
        0x01, 0x00, 0xB6, 0x13, 0xC9, 0xD9, 0x7C, 0x7E, 0x89, 0x5F, 0xF5, 0x76,
        0x8F, 0x00, 0xB8, 0x1B, 0xB5, 0xA5, 0xF4, 0x7F, 0xAF, 0xFB, 0x51, 0x89,
        0xB0, 0x58, 0x2A, 0x83, 0x30, 0x01, 0xB3, 0xAA, 0x39, 0x05, 0x98, 0x15,
        0xCD, 0xD3, 0x80, 0xB9, 0xA5, 0xA4, 0x02, 0x91, 0x07, 0x4C, 0x67, 0xDD,
        0x76, 0x41, 0xB8, 0x40, 0x3A, 0x5C, 0x29, 0xE4, 0x40, 0xEC, 0x01, 0xC9,
        0xAA, 0xE6, 0x23, 0x20, 0x59, 0xD1, 0x7C, 0x09, 0x24, 0x1B, 0x4E, 0x55,
        0x81, 0x68, 0x02, 0x99, 0xC0, 0xAD, 0x05, 0x20, 0x5E, 0x80, 0x49, 0xD7,
        0x8B, 0x1C, 0x30, 0x52, 0x80, 0x72, 0x64, 0xA8, 0xC0, 0x38, 0x04, 0x86,
        0x8A, 0xA5, 0xB2, 0xA5, 0x47, 0x53, 0x8B, 0x30, 0x33, 0x08, 0x6D, 0x37,
        0x2D, 0xAF, 0x1C, 0xC1, 0xF9, 0x19, 0xF4, 0x0D, 0xB7, 0xBC, 0x54, 0x3F,
        0xF4, 0xAC, 0xC2, 0xF5, 0x44, 0xCB, 0x7B, 0x5D, 0x46, 0x00, 0xA2, 0xF7,
        0x26, 0x5A, 0x9B, 0x18, 0x07, 0x40, 0x24, 0xB2, 0xD0, 0xFE, 0x14, 0xC7,
        0xAF, 0xC3, 0xD0, 0xB1, 0x0F, 0x1F, 0x7B, 0x71, 0xFC, 0x7E, 0x12, 0xC7,
        0x1F, 0xA7, 0xD0, 0xF6, 0x08, 0xCD, 0xC0, 0xD9, 0x0C, 0x1B, 0x5F, 0x77,
        0x11, 0xE2, 0x16, 0xFE, 0xCA, 0xF5, 0x6E, 0x3A, 0xD7, 0x3F, 0x00, 0xDD,
        0xF7, 0x67, 0xD6, 0xFB, 0x03, 0x90, 0x81, 0xE3, 0x79, 0x58, 0xED, 0x84,
        0xC5, 0x5D, 0x38, 0x78, 0x86, 0x91, 0x0B, 0xE8, 0xBE, 0x82, 0x7C, 0x17,
        0xAC, 0x4C, 0x21, 0x6E, 0xD5, 0x77, 0xE8, 0x5B, 0x01, 0x30, 0x90, 0xB3,
        0xFD, 0x5A, 0x25, 0xB4, 0x95, 0xE7, 0x5A, 0x85, 0xB9, 0xAC, 0x95, 0xAB,
        0xFB, 0xF5, 0x30, 0x92, 0xB6, 0xE3, 0xFD, 0xEB, 0xED, 0x7F, 0x4B, 0x79,
        0xDB, 0x0A, 0x20, 0x57, 0x97, 0x3B, 0x61, 0xAD, 0xBA, 0xAE, 0xAC, 0x59,
        0x29, 0x7D, 0x2F, 0x6D, 0x2D, 0x04, 0xCE, 0x58, 0xDA, 0x1A, 0xCF, 0x64,
        0x26, 0xF9, 0x04, 0x1D, 0x0E, 0x70, 0x1E, 0x53, 0xFB, 0xF6, 0xB1, 0x00,
        0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00,
        0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x34,
        0x49, 0x44, 0x41, 0x54, 0x28, 0x91, 0x63, 0x60, 0x18, 0x05, 0x38, 0x41,
        0x65, 0x65, 0xE5, 0x7F, 0x18, 0xBB, 0xAE, 0xAE, 0xEE, 0x3F, 0x2E, 0x75,
        0x4C, 0x94, 0x5A, 0x44, 0x1F, 0x03, 0xFE, 0xFF, 0xC7, 0xE9, 0x03, 0xE2,
        0x0C, 0x60, 0x64, 0x64, 0xA4, 0xCC, 0x00, 0x7C, 0x80, 0x62, 0x03, 0x46,
        0x01, 0x03, 0x03, 0x00, 0xC6, 0x3F, 0x07, 0xF0, 0x60, 0xDF, 0xFA, 0xE6,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
        };
        NSData* data=[NSData dataWithBytes:bytes length:sizeof(bytes)];
        _sidebarResizerImage=[[NSImage alloc]initWithData:data];
    }
    return _sidebarResizerImage;
}

@end
